"""
Django settings for oidc_app project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "very-secret")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "oidc_app.authentication",
    "mozilla_django_oidc",  # Load after auth
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "oidc_app.core.middleware.OIDCSessionRefreshMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "oidc_app.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR.joinpath("oidc_app/templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "oidc_app.wsgi.application"

AUTHENTICATION_BACKENDS = (
    "oidc_app.core.backends.CustomOIDCAuthenticationBackend",
    "django.contrib.auth.backends.ModelBackend",
)

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_REDIRECT_URL = "index"
LOGOUT_REDIRECT_URL = "index"


KEYCLOAK_DOMAIN = os.environ.get("KEYCLOAK_DOMAIN", "")  # [Your Keycloak domain]

OIDC_RP_CLIENT_ID = "django-client-id"
OIDC_RP_CLIENT_SECRET = "<client-secret>"

OIDC_RP_SIGN_ALGO = "RS256"
OIDC_OP_AUTHORIZATION_ENDPOINT = "http://localhost:8080/realms/myrealm/protocol/openid-connect/auth"
OIDC_RP_TOKEN_ENDPOINT = "http://localhost:8080/realms/myrealm/protocol/openid-connect/token"
OIDC_OP_USER_ENDPOINT = "http://localhost:8080/realms/myrealm/protocol/openid-connect/userinfo"
OIDC_OP_TOKEN_ENDPOINT = "http://localhost:8080/realms/myrealm/protocol/openid-connect/token"
OIDC_OP_JWKS_ENDPOINT = "http://localhost:8080/realms/myrealm/protocol/openid-connect/certs"

OIDC_OP_TOKEN_REVOKE_ENDPOINT = "http://localhost:8080/realms/myrealm/protocol/openid-connect/revoke"

OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS = 60 * 60  # 1 hour

OIDC_STORE_ACCESS_TOKEN = os.environ.get(
    "OIDC_STORE_ACCESS_TOKEN", True
)  # Store the access token in the OIDC backend
OIDC_STORE_ID_TOKEN = os.environ.get(
    "OIDC_STORE_ID_TOKEN", True
)  # Store the ID token in the OIDC backend
OIDC_STORE_REFRESH_TOKEN = os.environ.get(
    "OIDC_STORE_REFRESH_TOKEN", True
)  # Store the refresh token in the OIDC backend

OIDC_RP_SCOPES = os.environ.get(
    "OIDC_RP_SCOPES", "openid profile email offline_access"
)  # The OIDC scopes to request

OIDC_EXEMPT_URLS = [
    "oidc_authentication_init",
    "oidc_authentication_callback",
    "logout",
]
